{"version":3,"sources":["pages/Register.js"],"names":["Wrapper","styled","div","Title","h1","layout","labelCol","span","wrapperCol","tailLayout","offset","Component","history","useHistory","AuthStore","useStores","name","onFinish","values","console","log","setUsername","username","setPassword","password","register","then","push","catch","onFinishFailed","errorInfo","Item","label","rules","required","message","validator","rule","value","test","Promise","reject","length","resolve","min","max","Password","getFieldValue","type","htmlType"],"mappings":"4iBAaA,IAAMA,EAAUC,IAAOC,IAAV,KAQPC,EAAQF,IAAOG,GAAV,KAKLC,EAAS,CACbC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGJE,EAAa,CACjBD,WAAY,CACVE,OAAQ,EACRH,KAAM,KAgHKI,UA5GG,WAChB,IAAMC,EAAUC,cACRC,EAAcC,cAAdD,UA4CR,OACI,eAACd,EAAD,WACA,cAACG,EAAD,2BACF,eAAC,IAAD,2BAEME,GAFN,IAGEW,KAAK,QAELC,SAlDa,SAAAC,GACfC,QAAQC,IAAI,WAAYF,GACxBJ,EAAUO,YAAYH,EAAOI,UAC7BR,EAAUS,YAAYL,EAAOM,UAC7BV,EAAUW,WACPC,MAAK,WACJP,QAAQC,IAAI,gEACZR,EAAQe,KAAK,QACZC,OAAM,WACPT,QAAQC,IAAI,oEA0CdS,eAtCmB,SAACC,GACtBX,QAAQC,IAAI,UAAWU,IA+BvB,UAQE,cAAC,IAAKC,KAAN,CACEC,MAAM,qBACNhB,KAAK,WACLiB,MAAO,CACL,CAACC,UAAU,EAAKC,QAAS,mCAAW,CAACC,UA9BpB,SAACC,EAAMC,GAE5B,MAAG,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,gEACxCH,EAAMI,OAAO,GAAKJ,EAAMI,OAAO,GAAWF,QAAQC,OAAO,4CACrDD,QAAQG,aAsBf,SAOE,cAAC,IAAD,MAGF,cAAC,IAAKZ,KAAN,CACEC,MAAM,eACNhB,KAAK,WACLiB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,4BAEX,CACIS,IAAI,EACJT,QAAQ,mCAEZ,CACIU,IAAI,GACJV,QAAS,qCAdjB,SAkBE,cAAC,IAAMW,SAAP,MAIF,cAAC,IAAKf,KAAN,CACEC,MAAM,2BACNhB,KAAK,kBACLiB,MAAO,CACL,CAACC,UAAU,EAAMC,QAAS,yCAvDV,SAAC,GAAD,IAAEY,EAAF,EAAEA,cAAF,MAAsB,CAC5CX,UAD4C,SAClCC,EAAMC,GACZ,OAAGS,EAAc,cAAgBT,EAAcE,QAAQG,UAC7CH,QAAQC,OAAO,kDAgD3B,SAOE,cAAC,IAAMK,SAAP,MAGF,cAAC,IAAKf,KAAN,2BAAetB,GAAf,aACE,cAAC,IAAD,CAAQuC,KAAK,UAAUC,SAAS,SAAhC","file":"static/js/11.b8296317.chunk.js","sourcesContent":["// 表单匹配的时候有几种写法\r\n// 1. 定义 rules， require：true 表示必须存在，没有的话就是选填\r\n// 2. 定义一个函数， 案例（validator: validateUsername），在前面加上 const ，定义里面的规则和值，对值做一个更精确的判断  符合规则的话，返回 promise.resolve 不符合规则的话 返回 promise.reject\r\n// 3. 更精确规定：  与其他功能协同判断  直接写个函数\r\n// 案例（validateConfirm） ，直接返回一个对象， const validateConfirm = ({getFieldValue})\r\n\r\n\r\nimport React from 'react'\r\nimport { Form, Input, Button } from 'antd';\r\nimport styled from 'styled-components'\r\nimport { useStores } from '../stores'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Wrapper = styled.div`\r\n    max-width: 600px;\r\n    margin: 30px auto;\r\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n    border-radius: 4px;\r\n    padding: 20px;\r\n    background: rgb(255,255,255);\r\n`;\r\nconst Title = styled.h1`\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n`\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 18,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 6,\r\n    span: 18,\r\n  },\r\n};\r\n\r\nconst Component = () => {\r\n  const history = useHistory()\r\n  const { AuthStore } = useStores()\r\n\r\n  const onFinish = values => {\r\n    console.log('Success:', values);\r\n    AuthStore.setUsername(values.username)\r\n    AuthStore.setPassword(values.password)\r\n    AuthStore.register()\r\n      .then(()=>{\r\n        console.log('注册成功，跳转到首页')\r\n        history.push('/')\r\n      }).catch(() => {\r\n        console.log('注册失败，什么也不做')\r\n      })\r\n  }\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  }\r\n\r\n\r\n\r\n// Promise 对象有以下两个特点:\r\n// 1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：\r\n// pending: 初始状态，不是成功或失败状态。\r\n// fulfilled: 意味着操作成功完成。\r\n// rejected: 意味着操作失败。\r\n\r\n\r\n// 有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。\r\n  const validateUsername = (rule, value) =>{\r\n    //   匹配字母、数字、下划线。等价于 [A-Za-z0-9_]\r\n      if(/\\W/.test(value)) return Promise.reject('只能是字母数字下划线')\r\n      if(value.length<4 || value.length>10) return Promise.reject('长度为4~10个字母')\r\n      return Promise.resolve()\r\n  }\r\n//   返回一个对象，对象就叫做 getFieldValue  返回的是一个函数体，所以在箭头后面要加一个括号将其包住\r\n  const validateConfirm = ({getFieldValue}) => ({\r\n    validator(rule, value) {\r\n        if(getFieldValue('password') === value) return Promise.resolve()\r\n           return Promise.reject('两次密码不一致')\r\n    }\r\n  })\r\n\r\n\r\n  return (\r\n      <Wrapper>\r\n      <Title>注册</Title>\r\n    <Form\r\n    // 对象，可以快速布局\r\n      {...layout}\r\n      name=\"basic\"\r\n      \r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n      <Form.Item\r\n        label=\"用户名\"\r\n        name=\"username\"\r\n        rules={[\r\n          {required: true,message: '输入用户名!',},{validator: validateUsername}\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"密码\"\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,   \r\n            message: '输入密码',\r\n          },\r\n          {\r\n              min:4,\r\n              message:'最少4个字符'\r\n          },\r\n          {\r\n              max:10,\r\n              message: '最多10个字符'\r\n          }\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n\r\n      <Form.Item\r\n        label=\"确认密码\"\r\n        name=\"confirmPassword\"\r\n        rules={[\r\n          {required: true, message: '再次确认密码!',},validateConfirm\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          提交\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default Component"],"sourceRoot":""}